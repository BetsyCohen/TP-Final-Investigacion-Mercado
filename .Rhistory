host_response_rate = as.numeric(host_response_rate)/100,
host_acceptance_rate = str_remove_all(host_acceptance_rate,"[%]"),
host_acceptance_rate = as.numeric(host_acceptance_rate)/100)
### Librerías operativas
library(tidyverse)
library(janitor)
library(tidytext)
library(scales)
library(fastDummies)
### Librerías para tablas y gráficos
library(DT)
library(gt)
library(plotly)
# Bases requeridas:
df_alojamientos_badata <- read_csv("input/badata_alojamientos_turisticos.csv")
df_airbnb <- read.csv("input/listings.csv")
df_alojamientos_badata %>%
mutate("Tipo de alojamiento" = case_when(str_detect(tipo,"estrella")|tipo %in% c("Hotel sindical","Hospedaje") ~ "Hotel tradicional",
tipo %in% c("Boutique","Hotel boutique") ~"Hotel boutique",
TRUE ~ tipo))%>%
tabyl("Tipo de alojamiento") %>%
arrange(desc(n)) %>%
adorn_totals() %>%
adorn_pct_formatting(digits = 0) %>%
as.data.frame() %>%
gt() %>%
tab_header(
title = md('**Tipos de alojamiento CABA**')) %>%
opt_align_table_header('left') %>%
tab_source_note(source_note = "Fuente: BA DATA") %>%
opt_stylize(style = 3, color = "pink", add_row_striping = FALSE)
rm(df_alojamientos_badata)
paste ("La tabla de publicaciones (listing) muestra un total de",nrow(df_airbnb),"para las cuales hay",ncol(df_airbnb),"variables")
df_airbnb <- df_airbnb %>%
filter(number_of_reviews_ltm >0)
paste("Por lo que la base con la que iniciamos tiene",nrow(df_airbnb),"publicaciones")
na_counts <- data.frame(column_name = character(),
na_count = numeric())
for (col in names(df_airbnb)) {
if (class(df_airbnb[[col]]) == "character") {
na_counts <- na_counts %>%
add_row(column_name = col,
na_count = sum(df_airbnb[[col]] == "N/A"))
} else {
na_counts <- na_counts %>%
add_row(column_name = col,
na_count = sum(is.na(df_airbnb[[col]])))
}
}
plot_ly(na_counts, x = ~column_name, y = ~na_count, type = "scatter") %>%
layout(title = "Valores perdidos",
xaxis = list(title = "Variable"),
yaxis = list(title = "Cantidad de N/A"))
df_airbnb %>%
filter(is.na(bedrooms)) %>%
couunt(property_type) %>%
gt()
df_airbnb %>%
filter(is.na(bedrooms)) %>%
count(property_type) %>%
gt()
# Variables para PCA
cols_pca <- c("id","number_of_reviews_ltm","host_response_time","host_response_rate","host_acceptance_rate","accommodates","bedrooms","beds","amenities","price","review_scores_rating","review_scores_accuracy","review_scores_cleanliness","review_scores_checkin","review_scores_communication","review_scores_location","review_scores_value","instant_bookable","reviews_per_month")
# Variables factoriales
cols_fct <- c("id","review_l6m","host_is_superhost","host_has_profile_pic","host_identity_verified","neighbourhood_cleansed","room_type","bathrooms_text")
# Variables nube de palabras
cols_wc <- c("id","name","description","neighborhood_overview")
# Variables geo
cols_geo <- c("id","latitude","longitude")
### Librerías operativas
library(tidyverse)
library(janitor)
library(tidytext)
library(scales)
library(fastDummies)
### Librerías para tablas y gráficos
library(DT)
library(gt)
library(plotly)
# Bases requeridas:
df_alojamientos_badata <- read_csv("input/badata_alojamientos_turisticos.csv")
df_airbnb <- read.csv("input/listings.csv")
df_alojamientos_badata %>%
mutate("Tipo de alojamiento" = case_when(str_detect(tipo,"estrella")|tipo %in% c("Hotel sindical","Hospedaje") ~ "Hotel tradicional",
tipo %in% c("Boutique","Hotel boutique") ~"Hotel boutique",
TRUE ~ tipo))%>%
tabyl("Tipo de alojamiento") %>%
arrange(desc(n)) %>%
adorn_totals() %>%
adorn_pct_formatting(digits = 0) %>%
as.data.frame() %>%
gt() %>%
tab_header(
title = md('**Tipos de alojamiento CABA**')) %>%
opt_align_table_header('left') %>%
tab_source_note(source_note = "Fuente: BA DATA") %>%
opt_stylize(style = 3, color = "pink", add_row_striping = FALSE)
rm(df_alojamientos_badata)
paste ("La tabla de publicaciones (listing) muestra un total de",nrow(df_airbnb),"para las cuales hay",ncol(df_airbnb),"variables")
df_airbnb <- df_airbnb %>%
filter(number_of_reviews_ltm >0)
paste("Por lo que la base con la que iniciamos tiene",nrow(df_airbnb),"publicaciones")
na_counts <- data.frame(column_name = character(),
na_count = numeric())
for (col in names(df_airbnb)) {
if (class(df_airbnb[[col]]) == "character") {
na_counts <- na_counts %>%
add_row(column_name = col,
na_count = sum(df_airbnb[[col]] == "N/A"))
} else {
na_counts <- na_counts %>%
add_row(column_name = col,
na_count = sum(is.na(df_airbnb[[col]])))
}
}
plot_ly(na_counts, x = ~column_name, y = ~na_count, type = "scatter") %>%
layout(title = "Valores perdidos",
xaxis = list(title = "Variable"),
yaxis = list(title = "Cantidad de N/A"))
df_airbnb %>%
filter(is.na(bedrooms)) %>%
count(property_type) %>%
gt()
df_airbnb$bedrooms <- ifelse(is.na(df_airbnb$bedrooms),1,df_airbnb$bedrooms)
df_airbnb %>%
plot_ly(x = ~bedrooms, type = "histogram", marker = list(color = "#c18dc7") ) %>%
layout(title = "Distribución de la variable bedrooms")
df_airbnb %>%
filter(is.na(beds)) %>%
tabyl(accommodates) %>%
adorn_totals()
df_airbnb %>%
filter(is.na(beds)) %>%
filter(accommodates > 2) %>%
tabyl(property_type) %>%
adorn_totals()
df_airbnb$beds <- ifelse(is.na(df_airbnb$beds),1,df_airbnb$beds)
df_airbnb %>%
plot_ly(x = ~beds, type = "histogram", marker = list(color = "#c18dc7")) %>%
layout(title = "Distribución de la variable beds",
xaxis = list(title = "beds"),
yaxis = list(title = "Count"))
df_airbnb %>%
filter(host_acceptance_rate == "N/A") %>%
mutate(host_since = as.Date(host_since, format = "%Y-%m-%d")) %>%
plot_ly(x = ~host_since)
df_airbnb <- df_airbnb %>%
filter(!host_acceptance_rate == "N/A" | year(as.Date(host_since)) >= 2022) %>%
mutate(host_acceptance_rate = ifelse(host_acceptance_rate == "N/A","0%",host_acceptance_rate))
df_airbnb %>%
filter(host_response_rate == "N/A" | host_response_rate == "0%") %>%
tabyl(host_response_rate,host_response_time) %>%
adorn_title()
df_airbnb %>%
filter(host_response_rate == "N/A" & host_response_time =="N/A" ) %>%
mutate(last_review = as.Date(last_review, format = "%Y-%m-%d")) %>%
plot_ly(x = ~last_review) %>%
layout(title = "Ultima opinión recibida entre los host sin tiempo ni ratio de respuestas")
df_airbnb <- df_airbnb %>%
mutate(host_response_rate = ifelse(host_response_rate == "N/A","0%",host_response_rate),
host_response_time = ifelse(host_response_time =="N/A","a few days or more",host_response_time))
df_airbnb <-df_airbnb %>%
mutate(review_l6m = ifelse(as.Date(last_review)<as.Date("2022-07-01"),0,1) )
# Variables para PCA
cols_pca <- c("id","number_of_reviews_ltm","host_response_time","host_response_rate","host_acceptance_rate","accommodates","bedrooms","beds","amenities","price","review_scores_rating","review_scores_accuracy","review_scores_cleanliness","review_scores_checkin","review_scores_communication","review_scores_location","review_scores_value","instant_bookable","reviews_per_month")
# Variables factoriales
cols_fct <- c("id","review_l6m","host_is_superhost","host_has_profile_pic","host_identity_verified","neighbourhood_cleansed","room_type","bathrooms_text")
# Variables nube de palabras
cols_wc <- c("id","name","description","neighborhood_overview")
# Variables geo
cols_geo <- c("id","latitude","longitude")
# Creación de tablas
df_input_pca <- df_airbnb  %>% select(all_of(cols_pca))
df_fct <- df_airbnb  %>% select(all_of(cols_fct))
df_wc <- df_airbnb %>% select(all_of(cols_wc))
df_geo <- df_airbnb %>% select(all_of(cols_geo))
rm(cols_pca,cols_fct,cols_wc,cols_geo)
df_input_pca %>%
count(host_response_time) %>%
arrange(desc(n)) %>%
as.data.frame() %>%
gt() %>%
tab_header(
title = md('**Tiempo de respuesta del anfitrión**')) %>%
opt_align_table_header('left') %>%
opt_stylize(style = 3, color = "pink", add_row_striping = FALSE)
df_input_pca %>%
count(host_response_time) %>%
mutate(freq_rel = round(n/nrow(df_input_pca),3),
host_response_time_scaled = round((freq_rel / max(freq_rel)) * 5, 2)) %>%
select(host_response_time, freq_rel, host_response_time_scaled) %>%
arrange(desc(freq_rel)) %>%
as.data.frame() %>%
gt() %>%
tab_header(
title = md('**Tiempo de respuesta del anfitrión**')) %>%
opt_align_table_header('left') %>%
opt_stylize(style = 3, color = "pink", add_row_striping = FALSE)
df_input_pca <- df_input_pca %>%
mutate(host_response_time_scaled =
case_when(
host_response_time == "within an hour" ~ 5,
host_response_time == "within a few hours" ~ 1.22,
host_response_time == "within a day" ~ 0.44,
host_response_time %in% c("N/A","a few days or more") ~ 0.20))
df_input_pca %>%
tabyl(host_response_time,host_response_time_scaled) %>%
gt() %>%
tab_header(
title = md('**Escalado de variable host_response_time**')) %>%
opt_align_table_header('left') %>%
opt_stylize(style = 3, color = "pink", add_row_striping = FALSE)
df_input_pca %>%
select(host_response_rate,host_acceptance_rate,host_response_time) %>%
filter(host_response_rate == "N/A" | host_acceptance_rate == "N/A")
df_input_pca %>%
select(host_response_rate,host_acceptance_rate,host_response_time)
df_input_pca %>%
select(host_response_rate,host_acceptance_rate)
df_input_pca %>%
across(host_response_rate,host_acceptance_rate, class)
df_input_pca %>%
across(host_response_rate,host_acceptance_rate, ~ class)
df_input_pca %>%
across(host_response_rate,host_acceptance_rate, ~class)
df_input_pca %>%
across(host_response_rate,host_acceptance_rate, .class)
sapply(df_input_pca[c("host_response_rate", "host_acceptance_rate")], class)
df_input_pca <- df_input_pca %>%
mutate(
host_response_rate = as.numeric(str_remove_all(host_response_rate,"[%N/A]"))/100,
host_acceptance_rate = as.numeric(str_remove_all(host_acceptance_rate,"[%N/A]"))/100,
host_response_rate_scaled = (host_response_rate - min(host_response_rate, na.rm = TRUE)) /
(max(host_response_rate, na.rm = TRUE) - min(host_response_rate, na.rm = TRUE)) * 4 + 1,
host_acceptance_rate_scaled = (host_acceptance_rate - min(host_acceptance_rate, na.rm = TRUE)) /
(max(host_acceptance_rate, na.rm = TRUE) - min(host_acceptance_rate, na.rm = TRUE)) * 4 + 1
)
df_input_pca %>%
mutate(
host_response_rate = str_remove_all(host_response_rate,"[%]"),
host_response_rate = as.numeric(host_response_rate)/100,
host_acceptance_rate = str_remove_all(host_acceptance_rate,"[%]"),
host_acceptance_rate = as.numeric(host_acceptance_rate)/100)
sapply(df_input_pca[c("host_response_rate", "host_acceptance_rate")], class)
df_input_pca %>%
summarise(count(host_response_rate))
df_input_pca %>%
summarise(sum(host_response_rate))
df_input_pca %>%
plot_ly(x ~host_response_rate_scaled)
df_input_pca %>%
plot_ly(x = ~host_response_rate_scaled)
df_input_pca %>%
plot_ly(x = ~host_acceptance_rate_scaled)
df_airbnb_seg  <- df_airbnb_seg  %>%
mutate(price_US = as.numeric(gsub("[$,]", "",price))/350)
df_input_pca   <- df_input_pca   %>%
mutate(price_US = as.numeric(gsub("[$,]", "",price))/350)
plot_ly(df_input_pca ,y = ~price_US,type = "box", name = "Publicaciones") %>%
layout(title = "Precios de las publicaciones en US$",
yaxis = list(title = "Precio en US$ por noche"))
plot_ly(df_input_pca ,x= ~room_type, y = ~price_US,type = "box", name = ~room_type, color = ~room_type) %>%
layout(title = "Precios de las publicaciones en US$ según tipo",
yaxis = list(title = "Precio en US$ por noche"))
df_airbnb %>%
mutate(price_US = as.numeric(gsub("[$,]", "",price))/350) %>%
plot_ly(x= ~room_type, y = ~price_US,type = "box", name = ~room_type, color = ~room_type) %>%
layout(title = "Precios de las publicaciones en US$ según tipo",
yaxis = list(title = "Precio en US$ por noche"))
df_airbnb %>%
mutate(price_US = as.numeric(gsub("[$,]", "",price))/350) %>%
filter(price_US < 100) %>%
plot_ly(y = ~price_US,type = "box", name = "Publicaciones") %>%
layout(title = "Precios de las publicaciones en US$",
yaxis = list(title = "Precio en US$ por noche"))
df_input_pca %>%
filter(price_US < 100) %>%
plot_ly(x= ~price_US)
df_input_pca <- df_input_pca %>%
filter(price_US < 100)
quantile(df_input_pca$price_US)
df_input_pca <- df_input_pca %>%
filter(price_US < 100)
quantile(df_input_pca$price_US)
df_input_pca <- df_input_pca %>%
filter(price_US < 100)
quantile(df_input_pca$price_US)
df_input_pca <- df_input_pca %>%
mutate(price_category = case_when(
price <= 5 ~ "1-5",
price > 5 & price <= 15 ~ "5-15",
price > 15 & price <= 25 ~ "15-25",
price > 25 & price <= 35 ~ "25-35",
price > 35 ~ ">35"
))
df_input_pca <- df_input_pca %>%
mutate(scaled_price = case_when(
price <= 5 ~ scale(price, center = mean(df_input_pca$price[df_input_pca$price_category == "1-5"]),
scale = sd(df_input_pca$price[df_input_pca$price_category == "1-5"])) * 2 + 1,
price > 5 & price <= 15 ~ scale(price, center = mean(df_input_pca$price[df_input_pca$price_category == "5-15"]),
scale = sd(df_input_pca$price[df_input_pca$price_category == "5-15"])) * 2 + 2,
price > 15 & price <= 25 ~ scale(price, center = mean(df_input_pca$price[df_input_pca$price_category == "15-25"]),
scale = sd(df_input_pca$price[df_input_pca$price_category == "15-25"])) * 2 + 3,
price > 25 & price <= 35 ~ scale(price, center = mean(df_input_pca$price[df_input_pca$price_category == "25-35"]),
scale = sd(df_input_pca$price[df_input_pca$price_category == "25-35"])) * 2 + 4,
price > 35 ~ scale(price, center = mean(df_input_pca$price[df_input_pca$price_category == ">35"]),
scale = sd(df_input_pca$price[df_input_pca$price_category == ">35"])) * 2 + 5
))
df_input_pca <- df_input_pca %>%
mutate(price_US_category = case_when(
price_US <= 5 ~ "1-5",
price_US > 5 & price_US <= 15 ~ "5-15",
price_US > 15 & price_US <= 25 ~ "15-25",
price_US > 25 & price_US <= 35 ~ "25-35",
price_US > 35 ~ ">35"
))
df_input_pca <- df_input_pca %>%
mutate(scaled_price_US = case_when(
price_US <= 5 ~ scale(price_US, center = mean(df_input_pca$price_US[df_input_pca$price_US_category == "1-5"]),
scale = sd(df_input_pca$price_US[df_input_pca$price_US_category == "1-5"])) * 2 + 1,
price_US > 5 & price_US <= 15 ~ scale(price_US, center = mean(df_input_pca$price_US[df_input_pca$price_US_category == "5-15"]),
scale = sd(df_input_pca$price_US[df_input_pca$price_US_category == "5-15"])) * 2 + 2,
price_US > 15 & price_US <= 25 ~ scale(price_US, center = mean(df_input_pca$price_US[df_input_pca$price_US_category == "15-25"]),
scale = sd(df_input_pca$price_US[df_input_pca$price_US_category == "15-25"])) * 2 + 3,
price_US > 25 & price_US <= 35 ~ scale(price_US, center = mean(df_input_pca$price_US[df_input_pca$price_US_category == "25-35"]),
scale = sd(df_input_pca$price_US[df_input_pca$price_US_category == "25-35"])) * 2 + 4,
price_US > 35 ~ scale(price_US, center = mean(df_input_pca$price_US[df_input_pca$price_US_category == ">35"]),
scale = sd(df_input_pca$price_US[df_input_pca$price_US_category == ">35"])) * 2 + 5
))
df_input_pca$price_category <-NULL
df_input_pca <- df_input_pca %>%
mutate(price_US_category_1_to_5 = ifelse(price_US <= 5,price_US,NULL),
price_US_category_5_to_15 = ifelse( price_US > 5 & price_US <= 15,price_US,NULL),
price_US_category_15_to_25 = ifelse( price_US > 15 & price_US <= 25,price_US,NULL),
price_US_category_25_to_35 = ifelse( price_US > 25 & price_US <= 35,price_US,NULL),
price_US_category_35_more = ifelse(price_US > 35 ~ ">35",price_US,NULL))
df_input_pca <- df_input_pca %>%
mutate(price_US_category_1_to_5 = ifelse(price_US <= 5, price_US, NA_real_),
price_US_category_5_to_15 = ifelse(price_US > 5 & price_US <= 15, price_US, NA_real_),
price_US_category_15_to_25 = ifelse(price_US > 15 & price_US <= 25, price_US, NA_real_),
price_US_category_25_to_35 = ifelse(price_US > 25 & price_US <= 35, price_US, NA_real_),
price_US_category_35_more = ifelse(price_US > 35, price_US, NA_real_))
df_input_pca$scaled_price_US <- NULL
### Librerías operativas
library(tidyverse)
library(janitor)
library(tidytext)
library(scales)
library(fastDummies)
### Librerías para tablas y gráficos
library(DT)
library(gt)
library(plotly)
# Bases requeridas:
df_alojamientos_badata <- read_csv("input/badata_alojamientos_turisticos.csv")
df_airbnb <- read.csv("input/listings.csv")
df_alojamientos_badata %>%
mutate("Tipo de alojamiento" = case_when(str_detect(tipo,"estrella")|tipo %in% c("Hotel sindical","Hospedaje") ~ "Hotel tradicional",
tipo %in% c("Boutique","Hotel boutique") ~"Hotel boutique",
TRUE ~ tipo))%>%
tabyl("Tipo de alojamiento") %>%
arrange(desc(n)) %>%
adorn_totals() %>%
adorn_pct_formatting(digits = 0) %>%
as.data.frame() %>%
gt() %>%
tab_header(
title = md('**Tipos de alojamiento CABA**')) %>%
opt_align_table_header('left') %>%
tab_source_note(source_note = "Fuente: BA DATA") %>%
opt_stylize(style = 3, color = "pink", add_row_striping = FALSE)
rm(df_alojamientos_badata)
paste ("La tabla de publicaciones (listing) muestra un total de",nrow(df_airbnb),"para las cuales hay",ncol(df_airbnb),"variables")
df_airbnb <- df_airbnb %>%
filter(number_of_reviews_ltm >0)
paste("Por lo que la base con la que iniciamos tiene",nrow(df_airbnb),"publicaciones")
na_counts <- data.frame(column_name = character(),
na_count = numeric())
for (col in names(df_airbnb)) {
if (class(df_airbnb[[col]]) == "character") {
na_counts <- na_counts %>%
add_row(column_name = col,
na_count = sum(df_airbnb[[col]] == "N/A"))
} else {
na_counts <- na_counts %>%
add_row(column_name = col,
na_count = sum(is.na(df_airbnb[[col]])))
}
}
plot_ly(na_counts, x = ~column_name, y = ~na_count, type = "scatter") %>%
layout(title = "Valores perdidos",
xaxis = list(title = "Variable"),
yaxis = list(title = "Cantidad de N/A"))
df_airbnb %>%
filter(is.na(bedrooms)) %>%
count(property_type) %>%
gt()
df_airbnb$bedrooms <- ifelse(is.na(df_airbnb$bedrooms),1,df_airbnb$bedrooms)
df_airbnb %>%
plot_ly(x = ~bedrooms, type = "histogram", marker = list(color = "#c18dc7") ) %>%
layout(title = "Distribución de la variable bedrooms")
df_airbnb %>%
filter(is.na(beds)) %>%
tabyl(accommodates) %>%
adorn_totals()
df_airbnb %>%
filter(is.na(beds)) %>%
filter(accommodates > 2) %>%
tabyl(property_type) %>%
adorn_totals()
df_airbnb$beds <- ifelse(is.na(df_airbnb$beds),1,df_airbnb$beds)
df_airbnb %>%
plot_ly(x = ~beds, type = "histogram", marker = list(color = "#c18dc7")) %>%
layout(title = "Distribución de la variable beds",
xaxis = list(title = "beds"),
yaxis = list(title = "Count"))
df_airbnb %>%
filter(host_acceptance_rate == "N/A") %>%
mutate(host_since = as.Date(host_since, format = "%Y-%m-%d")) %>%
plot_ly(x = ~host_since)
df_airbnb <- df_airbnb %>%
filter(!host_acceptance_rate == "N/A" | year(as.Date(host_since)) >= 2022) %>%
mutate(host_acceptance_rate = ifelse(host_acceptance_rate == "N/A","0%",host_acceptance_rate))
df_airbnb %>%
filter(host_response_rate == "N/A" | host_response_rate == "0%") %>%
tabyl(host_response_rate,host_response_time) %>%
adorn_title()
df_airbnb %>%
filter(host_response_rate == "N/A" & host_response_time =="N/A" ) %>%
mutate(last_review = as.Date(last_review, format = "%Y-%m-%d")) %>%
plot_ly(x = ~last_review) %>%
layout(title = "Ultima opinión recibida entre los host sin tiempo ni ratio de respuestas")
df_airbnb <- df_airbnb %>%
mutate(host_response_rate = ifelse(host_response_rate == "N/A","0%",host_response_rate),
host_response_time = ifelse(host_response_time =="N/A","a few days or more",host_response_time))
df_airbnb <-df_airbnb %>%
mutate(review_l6m = ifelse(as.Date(last_review)<as.Date("2022-07-01"),0,1) )
# Variables para PCA
cols_pca <- c("id","number_of_reviews_ltm","host_response_time","host_response_rate","host_acceptance_rate","accommodates","bedrooms","beds","amenities","price","review_scores_rating","review_scores_accuracy","review_scores_cleanliness","review_scores_checkin","review_scores_communication","review_scores_location","review_scores_value","instant_bookable","reviews_per_month")
# Variables factoriales
cols_fct <- c("id","review_l6m","host_is_superhost","host_has_profile_pic","host_identity_verified","neighbourhood_cleansed","room_type","bathrooms_text")
# Variables nube de palabras
cols_wc <- c("id","name","description","neighborhood_overview")
# Variables geo
cols_geo <- c("id","latitude","longitude")
# Creación de tablas
df_input_pca <- df_airbnb  %>% select(all_of(cols_pca))
df_fct <- df_airbnb  %>% select(all_of(cols_fct))
df_wc <- df_airbnb %>% select(all_of(cols_wc))
df_geo <- df_airbnb %>% select(all_of(cols_geo))
rm(cols_pca,cols_fct,cols_wc,cols_geo)
df_input_pca %>%
count(host_response_time) %>%
arrange(desc(n)) %>%
as.data.frame() %>%
gt() %>%
tab_header(
title = md('**Tiempo de respuesta del anfitrión**')) %>%
opt_align_table_header('left') %>%
opt_stylize(style = 3, color = "pink", add_row_striping = FALSE)
df_input_pca %>%
count(host_response_time) %>%
mutate(freq_rel = round(n/nrow(df_input_pca),3),
host_response_time_scaled = round((freq_rel / max(freq_rel)) * 5, 2)) %>%
select(host_response_time, freq_rel, host_response_time_scaled) %>%
arrange(desc(freq_rel)) %>%
as.data.frame() %>%
gt() %>%
tab_header(
title = md('**Tiempo de respuesta del anfitrión**')) %>%
opt_align_table_header('left') %>%
opt_stylize(style = 3, color = "pink", add_row_striping = FALSE)
df_input_pca <- df_input_pca %>%
mutate(host_response_time_scaled =
case_when(
host_response_time == "within an hour" ~ 5,
host_response_time == "within a few hours" ~ 1.22,
host_response_time == "within a day" ~ 0.44,
host_response_time %in% c("N/A","a few days or more") ~ 0.20))
df_input_pca %>%
tabyl(host_response_time,host_response_time_scaled) %>%
gt() %>%
tab_header(
title = md('**Escalado de variable host_response_time**')) %>%
opt_align_table_header('left') %>%
opt_stylize(style = 3, color = "pink", add_row_striping = FALSE)
sapply(df_input_pca[c("host_response_rate", "host_acceptance_rate")], class)
df_input_pca <- df_input_pca %>%
mutate(
host_response_rate = as.numeric(str_remove_all(host_response_rate,"[%N/A]"))/100,
host_acceptance_rate = as.numeric(str_remove_all(host_acceptance_rate,"[%N/A]"))/100,
host_response_rate_scaled = (host_response_rate - min(host_response_rate, na.rm = TRUE)) /
(max(host_response_rate, na.rm = TRUE) - min(host_response_rate, na.rm = TRUE)) * 4 + 1,
host_acceptance_rate_scaled = (host_acceptance_rate - min(host_acceptance_rate, na.rm = TRUE)) /
(max(host_acceptance_rate, na.rm = TRUE) - min(host_acceptance_rate, na.rm = TRUE)) * 4 + 1
)
# chequeo cómo quedaron
# df_input_pca %>%
#   plot_ly(x = ~host_response_rate_scaled)
#
# df_input_pca %>%
#   plot_ly(x = ~host_acceptance_rate_scaled)
df_input_pca   <- df_input_pca   %>%
mutate(price_US = as.numeric(gsub("[$,]", "",price))/350)
plot_ly(df_input_pca ,y = ~price_US,type = "box", name = "Publicaciones") %>%
layout(title = "Precios de las publicaciones en US$",
yaxis = list(title = "Precio en US$ por noche"))
df_airbnb %>%
mutate(price_US = as.numeric(gsub("[$,]", "",price))/350) %>%
plot_ly(x= ~room_type, y = ~price_US,type = "box", name = ~room_type, color = ~room_type) %>%
layout(title = "Precios de las publicaciones en US$ según tipo",
yaxis = list(title = "Precio en US$ por noche"))
