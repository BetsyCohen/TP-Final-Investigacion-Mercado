skimr::skim(df_airbnb)
dicc_var<- readxl::read_xlsx("ldc.xlsx")
DT::datatable(dicc_var)
variables_seleccionadas <- c("id","name","number_of_reviews","number_of_reviews_ltm","number_of_reviews_l30d","description","neighborhood_overview","host_id","host_response_time","host_response_rate","host_acceptance_rate","host_is_superhost","host_has_profile_pic","host_identity_verified","neighbourhood_cleansed","latitude","longitude","room_type","accommodates","bathrooms_text","bedrooms","beds","amenities","price","review_scores_rating","review_scores_accuracy","review_scores_cleanliness","review_scores_checkin","review_scores_communication","review_scores_location","review_scores_value","instant_bookable","calculated_host_listings_count","calculated_host_listings_count_entire_homes","calculated_host_listings_count_private_rooms","calculated_host_listings_count_shared_rooms","reviews_per_month")
DT::datatable(dicc_var %>%
filter(Variable %in% variables_seleccionadas))
# Filtrar columnas seleccionadas
df_airbnb <- df_airbnb %>%
select(all_of(variables_seleccionadas))
#Check formato
glimpse(df_airbnb)
library(tidyverse)
library(janitor)
library(tidytext)
library(DT)
#library(RTutor)
#library(DataExplorer)
# Bases requeridas:
df_alojamientos_badata <- read_csv("Otras Fuentes/badata_alojamientos_turisticos.csv")
df_airbnb <- read.csv("listings.csv")
#Parmetros
knitr::kable(df_alojamientos_badata %>%
mutate("Tipo de alojamiento" = case_when(str_detect(tipo,"estrella")|tipo %in% c("Hotel sindical","Hospedaje") ~ "Hotel tradicional",
tipo %in% c("Boutique","Hotel boutique") ~"Hotel boutique",
TRUE ~ tipo))%>%
tabyl("Tipo de alojamiento") %>%
arrange(desc(n)) %>%
adorn_totals() %>%
adorn_pct_formatting(digits = 0) %>%
as.data.frame(),)
skimr::skim(df_airbnb)
dicc_var<- readxl::read_xlsx("ldc.xlsx")
DT::datatable(dicc_var)
variables_seleccionadas <- c("id","name","number_of_reviews","number_of_reviews_ltm","number_of_reviews_l30d","description","neighborhood_overview","host_id","host_response_time","host_response_rate","host_acceptance_rate","host_is_superhost","host_has_profile_pic","host_identity_verified","neighbourhood_cleansed","latitude","longitude","room_type","accommodates","bathrooms_text","bedrooms","beds","amenities","price","review_scores_rating","review_scores_accuracy","review_scores_cleanliness","review_scores_checkin","review_scores_communication","review_scores_location","review_scores_value","instant_bookable","calculated_host_listings_count","calculated_host_listings_count_entire_homes","calculated_host_listings_count_private_rooms","calculated_host_listings_count_shared_rooms","reviews_per_month")
DT::datatable(dicc_var %>%
filter(Variable %in% variables_seleccionadas))
# Filtrar columnas seleccionadas
df_airbnb <- df_airbnb %>%
select(all_of(variables_seleccionadas))
#Check formato
glimpse(df_airbnb)
df_airbnb <- df_airbnb %>%
mutate(host_response_time = factor(host_response_time,
levels = c("within an hour","within a few hours","within a day","a few days or more","N/A"),
label = c("within an hour","within a few hours","within a day","a few days or more","N/A"),
ordered = T),
host_response_rate = str_remove_all(host_response_rate,"[%N/A]"),
host_response_rate = as.numeric(host_response_rate)/100,
host_acceptance_rate = str_remove_all(host_acceptance_rate,"[%N/A]"),
host_acceptance_rate = as.numeric(host_acceptance_rate)/100)
df_airbnb <- df_airbnb %>%
mutate(bathrooms_text = str_replace(bathrooms_text, "Shared half-bath", "1 Shared_half-bath")) %>%
mutate(bathrooms_text = str_replace(bathrooms_text, "Private half-bath", "1 Private_half-bath")) %>%
separate(bathrooms_text, into = c("num_baths", "bath_type"), sep = " ", fill = "right", remove = F, convert = T)
freq_amenities <- df_airbnb %>%
select(amenities) %>%
mutate(amenities = str_replace_all(amenities, "[\\[\\]\"]", "")) %>% # borramos brackets y comillas
unnest_tokens(amenity, amenities, token = "regex", pattern = ",\\s*") %>% # Tokeniza y pone un token por fila
tabyl(amenity) %>%
arrange(desc(n)) %>%
adorn_pct_formatting()
# Basados en estos tokens construimos un set de 19 amenities (como variables dicotòmicas) que agrupan varias regex que creemos podrían ser de interés para nuestro cliente.
df_airbnb <- df_airbnb %>%
mutate(amenities = str_replace_all(amenities, "[\\[\\]\"]", "")) %>% # Remove brackets and quotes
mutate(am_tv = ifelse(str_detect(amenities, regex("\\b(TV|HDTV)\\b", ignore_case = TRUE)), 1, 0),
am_streaming_serv_chromecast = ifelse(str_detect(amenities, regex("\\b(netflix|amazon|apple tv|disney+|hbo max|chromecast)\\b", ignore_case = TRUE)), 1, 0),
am_wifi = ifelse(str_detect(amenities, regex("\\bWifi\\b",ignore_case = TRUE)), 1, 0),
am_air_conditioning = ifelse(str_detect(amenities, regex("\\bair conditioning|ac |
central air conditioning|
portable air conditioning\\b", ignore_case = T)), 1, 0),
am_heating = ifelse(str_detect(amenities,regex("\\bheating\\b", ignore_case = TRUE)), 1, 0),
am_kitchen_cooking_stuff = ifelse(str_detect(amenities,regex("\\bkitchen|dishes and silverware|cooking basics|refrigerator|microwave|coffee maker|dining table|toaster|freezer|hot water kettle|stove|wine glasses|coffee\\b", ignore_case = TRUE)), 1, 0),
am_washer = ifelse(str_detect(amenities, regex("\\bwasher|dryer\\b",ignore_case = TRUE)), 1, 0),
am_bedroom_stuff = ifelse(str_detect(amenities,regex("\\bextra pillows and blankets|bed linens\\b", ignore_case = TRUE)), 1, 0),
am_essentials = ifelse(str_detect(amenities,regex("\\bessentials|hangers|hair dryer|hot wate|iron\\b",ignore_case = T)), 1, 0),
am_long_term_stays = ifelse(str_detect(amenities,regex("\\blong term stays allowed|cleaning products\\b",ignore_case = TRUE)), 1, 0),
am_patio_balcony = ifelse(str_detect(amenities,regex("\\bprivate patio or balcony|patio or balcony|shared patio or balcony|backyard\\b", ignore_case = TRUE)),1,0),
am_parking = ifelse(str_detect(amenities,"\\bparking\\b"),1,0),
am_elevator = ifelse(str_detect(amenities,regex("\\belevator\\b", ignore_case = T)),1,0),
am_host_attention = ifelse(str_detect(amenities,"\\bHost greets you\\b"),1,0),
am_shampoo_bath_stuff = ifelse(str_detect(amenities,regex("\\bshampoo|conditioner|bathroom essentials",ignore_case = TRUE)),1,0),
am_bathtub = ifelse(str_detect(amenities,regex("\\bbathtub\\b", ignore_case = TRUE)),1,0),
am_smoking_allowed = ifelse(str_detect(amenities,regex("\\bsmoking allowed\\b",ignore_case= TRUE)),1,0),
am_pet_friendly = ifelse(str_detect(amenities,regex("\\bpets allowed\\b",ignore_case = TRUE)),1,0),
am_fire_security = ifelse(str_detect(amenities,regex("\\bfire extinguisher|smoke alarm|carbon monoxide alarm",ignore_case = TRUE)),1,0))
df_airbnb <- df_airbnb %>%
mutate(price = as.numeric(str_remove_all(price, "[$,]")))
DataExplorer::create_report(df_airbnb)
df_airbnb %>%
tabyl(bath_type)
View(df_airbnb)
View(df_airbnb)
df_airbnb %>%
select(bathrooms_text) %>%
filter(str_detect(bathrooms_text,"baths"))
df_airbnb %>%
select(room_type,bathrooms_text) %>%
filter(str_detect(bathrooms_text,"baths"))
df_airbnb %>%
select(room_type,bathrooms_text) %>%
filter(str_detect(bath_type,"baths"))
df_airbnb %>%
select(room_type,bathrooms_text,bath_type) %>%
filter(str_detect(bath_type,"baths"))
df_airbnb %>%
tabyl(bath_type)
# para ver si baths es privado (ya que asumimos que una casa puede tener más de un baño) lo chequeo contra el room_type
df_airbnb %>%
filter(bath_type == "baths") %>%
tabyl(room_type,bath_type)
library(tidyverse)
library(tidyverse)
library(janitor)
library(tidytext)
library(tidyverse)
library(janitor)
library(tidytext)
library(DT)
df_airbnb$bath_type
# Lo dicotomizamos a privado(1) o no privado (0) asumiendo que los que tienen más de un baño "baths" también son privados.
df_airbnb <- df_airbnb %>%
mutate(bath_type = case_when(bath_type %in% c("bath","baths","private","private","Private_half-bath") ~ 1,
bath_type %in% c() ~ 1))
# para ver si baths es privado (ya que asumimos que una casa puede tener más de un baño) lo chequeo contra el room_type y efectivamente en la mayoría de los casos son Entire Home/apt
df_airbnb %>%
filter(bath_type == "baths") %>%
tabyl(room_type,bath_type)
library(tidyverse)
library(tidyverse)
library(janitor)
library(tidytext)
library(tidyverse)
library(janitor)
library(tidytext)
library(DT)
# Bases requeridas:
df_alojamientos_badata <- read_csv("input/badata_alojamientos_turisticos.csv")
df_airbnb <- read.csv("input/listings.csv")
skimr::skim(df_airbnb)
rm(df_alojamientos_badata)
dicc_var<- readxl::read_xlsx("ldc.xlsx")
dicc_var<- readxl::read_xlsx("input/ldc.xlsx")
DT::datatable(dicc_var)
df_airbnb <- df_airbnb %>%
mutate(host_response_time = factor(host_response_time,
levels = c("within an hour","within a few hours","within a day","a few days or more","N/A"),
label = c("within an hour","within a few hours","within a day","a few days or more","N/A"),
ordered = T),
host_response_rate = str_remove_all(host_response_rate,"[%N/A]"),
host_response_rate = as.numeric(host_response_rate)/100,
host_acceptance_rate = str_remove_all(host_acceptance_rate,"[%N/A]"),
host_acceptance_rate = as.numeric(host_acceptance_rate)/100)
df_airbnb <- df_airbnb %>%
mutate(bathrooms_text = str_replace(bathrooms_text, "Shared half-bath", "1 Shared_half-bath")) %>%
mutate(bathrooms_text = str_replace(bathrooms_text, "Private half-bath", "1 Private_half-bath")) %>%
separate(bathrooms_text, into = c("num_baths", "bath_type"), sep = " ", fill = "right", remove = F, convert = T)
#me quedan 6 categiorías de bath que las dicotomizo a si el baño es privado no
df_airbnb %>%
tabyl(bath_type)
# para ver si baths es privado (ya que asumimos que una casa puede tener más de un baño) lo chequeo contra el room_type y efectivamente en la mayoría de los casos son Entire Home/apt
df_airbnb %>%
filter(bath_type == "baths") %>%
tabyl(room_type,bath_type)
# Lo dicotomizamos a privado(1) o no privado (0) asumiendo que los que tienen más de un baño "baths" también son privados.
df_airbnb %>%
mutate(bath_type = case_when(bath_type %in% c("bath","baths","private","private","Private_half-bath") ~ 1,
bath_type %in% c() ~ 0)) %>%
tabyl(room_type,bath_type)
# para ver si baths es privado (ya que asumimos que una casa puede tener más de un baño) lo chequeo contra el room_type y efectivamente en la mayoría de los casos son Entire Home/apt
df_airbnb %>%
filter(bath_type == "baths") %>%
tabyl(room_type,bath_type)
# Lo dicotomizamos a privado(1) o no privado (0) asumiendo que los que tienen más de un baño "baths" también son privados.
df_airbnb %>%
mutate(bath_type = case_when(bath_type %in% c("bath","baths","private","private","Private_half-bath") ~ 1,
bath_type %in% c() ~ 0)) %>%
tabyl(bath_type,room_type)
# Lo dicotomizamos a privado(1) o no privado (0) asumiendo que los que tienen más de un baño "baths" también son privados.
df_airbnb %>%
mutate(bath_type = case_when(bath_type %in% c("bath","baths","private","private","Private_half-bath") ~ "Private",
bath_type %in% c() ~ "Shared")) %>%
tabyl(bath_type,room_type)
#me quedan 6 categiorías de bath que las dicotomizo a si el baño es privado no
df_airbnb %>%
tabyl(bath_type)
# para ver si baths es privado (ya que asumimos que una casa puede tener más de un baño) lo chequeo contra el room_type y efectivamente en la mayoría de los casos son Entire Home/apt
df_airbnb %>%
filter(bath_type == "baths") %>%
tabyl(room_type,bath_type)
# Lo dicotomizamos a privado(1) o no privado (0) asumiendo que los que tienen más de un baño "baths" también son privados.
df_airbnb %>%
mutate(bath_type = case_when(bath_type %in% c("bath","baths","private","private","Private_half-bath") ~ "Private",
bath_type %in% c() ~ "Shared")) %>%
tabyl(bath_type,room_type)
#me quedan 6 categiorías de bath que las dicotomizo a si el baño es privado no
df_airbnb %>%
tabyl(bath_type)
# Lo dicotomizamos a privado(1) o no privado (0) asumiendo que los que tienen más de un baño "baths" también son privados.
df_airbnb %>%
mutate(bath_type = case_when(bath_type %in% c("bath","baths","private","private","Private_half-bath") ~ "Private",
bath_type %in% c("shared","Shared_half-bath") ~ "Shared")) %>%
tabyl(bath_type,room_type)
# Lo dicotomizamos a privado(1) o no privado (0) asumiendo que los que tienen más de un baño "baths" también son privados.
df_airbnb <- df_airbnb %>%
mutate(bath_type = case_when(bath_type %in% c("bath","baths","private","private","Private_half-bath") ~ "Private",
bath_type %in% c("shared","Shared_half-bath") ~ "Shared"))
df_airbnb %>%
tabyl(room_type,bath_type)
df_airbnb %>%
tabyl(bath_type,room_type)
df_airbnb %>%
tabyl(bath_type,room_type) %>%
adorn_title("top")
df_airbnb %>%
tabyl(bath_type,room_type) %>%
adorn_percentages() %>%
adorn_title("top")
df_airbnb %>%
tabyl(bath_type,room_type) %>%
adorn_percentages() %>%
adorn_pct_formatting() %>%
adorn_title("top")
df_airbnb %>%
tabyl(bath_type,room_type) %>%
adorn_percentages("col") %>%
adorn_pct_formatting() %>%
adorn_title("top")
df_airbnb %>%
mutate(bath_type = case_when(is.na(bath_type) & room_type == "Entire home/apt" ~ "Private",
is.na(bath_type) & room_type == "Hotel room" ~ "Private",
is.na(bath_type) & room_type == "Private room" ~ "Shared",
is.na(bath_type) & room_type == "Shared room" ~ "Shared")) %>%
tabyl(bath_type,room_type) %>%
adorn_percentages("col") %>%
adorn_pct_formatting() %>%
adorn_title("top")
df_airbnb %>%
mutate(bath_type = case_when(is.na(bath_type) & room_type == "Entire home/apt" ~ "Private",
is.na(bath_type) & room_type == "Hotel room" ~ "Private",
is.na(bath_type) & room_type == "Private room" ~ "Shared",
is.na(bath_type) & room_type == "Shared room" ~ "Shared",
TRUE ~ bath_type )) %>%
tabyl(bath_type,room_type) %>%
adorn_percentages("col") %>%
adorn_pct_formatting() %>%
adorn_title("top")
# Imputación de NA  segun el tipo de habitacion
df_airbnb <- df_airbnb %>%
mutate(bath_type = case_when(is.na(bath_type) & room_type == "Entire home/apt" ~ "Private",
is.na(bath_type) & room_type == "Hotel room" ~ "Private",
is.na(bath_type) & room_type == "Private room" ~ "Shared",
is.na(bath_type) & room_type == "Shared room" ~ "Shared",
TRUE ~ bath_type ))
df_airbnb %>%
tabyl(bath_type,room_type) %>%
adorn_percentages("col") %>%
adorn_pct_formatting() %>%
adorn_title("top")
freq_amenities <- df_airbnb %>%
select(amenities) %>%
mutate(amenities = str_replace_all(amenities, "[\\[\\]\"]", "")) %>% # borramos brackets y comillas
unnest_tokens(amenity, amenities, token = "regex", pattern = ",\\s*") %>% # Tokeniza y pone un token por fila
tabyl(amenity) %>%
arrange(desc(n)) %>%
adorn_pct_formatting()
freq_amenities
df_airbnb <- df_airbnb %>%
mutate(amenities = str_replace_all(amenities, "[\\[\\]\"]", "")) %>% # Remove brackets and quotes
mutate(am_tv = ifelse(str_detect(amenities, regex("\\b(TV|HDTV)\\b", ignore_case = TRUE)), 1, 0),
am_streaming_serv_chromecast = ifelse(str_detect(amenities, regex("\\b(netflix|amazon|apple tv|disney+|hbo max|chromecast)\\b", ignore_case = TRUE)), 1, 0),
am_wifi = ifelse(str_detect(amenities, regex("\\bWifi\\b",ignore_case = TRUE)), 1, 0),
am_air_conditioning = ifelse(str_detect(amenities, regex("\\bair conditioning|ac |
central air conditioning|
portable air conditioning\\b", ignore_case = T)), 1, 0),
am_heating = ifelse(str_detect(amenities,regex("\\bheating\\b", ignore_case = TRUE)), 1, 0),
am_kitchen_cooking_stuff = ifelse(str_detect(amenities,regex("\\bkitchen|dishes and silverware|cooking basics|refrigerator|microwave|coffee maker|dining table|toaster|freezer|hot water kettle|stove|wine glasses|coffee\\b", ignore_case = TRUE)), 1, 0),
am_washer = ifelse(str_detect(amenities, regex("\\bwasher|dryer\\b",ignore_case = TRUE)), 1, 0),
am_bedroom_stuff = ifelse(str_detect(amenities,regex("\\bextra pillows and blankets|bed linens\\b", ignore_case = TRUE)), 1, 0),
am_essentials = ifelse(str_detect(amenities,regex("\\bessentials|hangers|hair dryer|hot wate|iron\\b",ignore_case = T)), 1, 0),
am_long_term_stays = ifelse(str_detect(amenities,regex("\\blong term stays allowed|cleaning products\\b",ignore_case = TRUE)), 1, 0),
am_patio_balcony = ifelse(str_detect(amenities,regex("\\bprivate patio or balcony|patio or balcony|shared patio or balcony|backyard\\b", ignore_case = TRUE)),1,0),
am_parking = ifelse(str_detect(amenities,"\\bparking\\b"),1,0),
am_elevator = ifelse(str_detect(amenities,regex("\\belevator\\b", ignore_case = T)),1,0),
am_host_attention = ifelse(str_detect(amenities,"\\bHost greets you\\b"),1,0),
am_shampoo_bath_stuff = ifelse(str_detect(amenities,regex("\\bshampoo|conditioner|bathroom essentials",ignore_case = TRUE)),1,0),
am_bathtub = ifelse(str_detect(amenities,regex("\\bbathtub\\b", ignore_case = TRUE)),1,0),
am_smoking_allowed = ifelse(str_detect(amenities,regex("\\bsmoking allowed\\b",ignore_case= TRUE)),1,0),
am_pet_friendly = ifelse(str_detect(amenities,regex("\\bpets allowed\\b",ignore_case = TRUE)),1,0),
am_fire_security = ifelse(str_detect(amenities,regex("\\bfire extinguisher|smoke alarm|carbon monoxide alarm",ignore_case = TRUE)),1,0))
rm(freq_amenities)
df_airbnb <- df_airbnb %>%
mutate(price = as.numeric(str_remove_all(price, "[$,]")))
View(df_airbnb)
View(df_airbnb)
freq_table <- function(df) {
output <- list()
for (col in colnames(df)) {
if (is.factor(df[[col]]) | is.character(df[[col]]) | is.logical(df[[col]])) {
output[[col]] <- df %>%
tabyl({{col}}) %>%
adorn_pct_formatting(digits = 2)
} else if (is.numeric(df[[col]])) {
output[[col]] <- df %>%
select({{col}}) %>%
janitor::tabyl() %>%
janitor::adorn_pct_formatting(digits = 2)
}
}
return(output)
}
freq_table(df_airbnb)
freq_table(mtcars)
# función para correr la tablas de frencuencia en todo el df
freq_table <- function(data, cols) {
freq_list <- list()
for (col in cols) {
freq <- data %>%
select({{ col }}) %>%
tabyl({{ col }}) %>%
adorn_pct_formatting()
freq_list[[col]] <- freq
}
return(freq_list)
}
names(df_airbnb)
head(df_airbnb$accommodates)
freq_table_categ <- function(data) {
data %>%
select_if(is.character) %>%
tabyl() %>%
adorn_pct_formatting() %>%
print()
}
freq_table_categ(df_airbnb)
df_airbnb %>%
select_if(is.character) %>%
```
df_airbnb %>%
select_if(is.character)
df_airbnb %>%
select_if(is.character) %>%
name()
df_airbnb %>%
select_if(is.character) %>%
colnames()
head(df_airbnb$host_about)
head(df_airbnb$description)
df_airbnb %>%
filter(is.na(description))
options = list(pageLength = 10, scrollY = "200px")
DT::datatable(dicc_var,
DT::datatable(dicc_var, options = list(pageLength = 10, scrollY = "200px"))
DT::datatable(dicc_var, options = list(pageLength = 10, scrollY = "200px"))
DT::datatable(dicc_var)
DT::datatable(dicc_var,
options = list(pageLength = 10, scrollY = "200px"))
DT::datatable(dicc_var,
options = list(pageLength = 10, scrollY = "400px"))
DT::datatable(dicc_var,
options = list(pageLength = 10, scrollY = "600px"))
DT::datatable(dicc_var,
options = list(pageLength = 10, scrollY = "800px"))
DT::datatable(dicc_var,
options = list(pageLength = 10, scrollY = "700px"))
df_airbnb$bathrooms_text<- NULL
df_airbnb <- read.csv("input/listings.csv")
dicc_var<- readxl::read_xlsx("input/ldc.xlsx")
DT::datatable(dicc_var,
options = list(pageLength = 10, scrollY = "700px"))
# vector con las variables seleccionadas
variables_seleccionadas <- c("id","name","number_of_reviews","number_of_reviews_ltm","number_of_reviews_l30d","host_id","host_response_time","host_response_rate","host_acceptance_rate","host_is_superhost","host_has_profile_pic","host_identity_verified","neighbourhood_cleansed","latitude","longitude","room_type","accommodates","bathrooms_text","bedrooms","beds","amenities","price","review_scores_rating","review_scores_accuracy","review_scores_cleanliness","review_scores_checkin","review_scores_communication","review_scores_location","review_scores_value","instant_bookable","reviews_per_month")
# vector con otras variables que serían interesantes en un ulterior analisis con NLP (usarlas para hacer nubes de palabrtas una vez que están ya hechos los clusters, se une todo por el ID de la publicación o del host segun coorresponda a la tabla)
variables_nlp <- c("description","neighborhood_overview")
# Filtrar columnas seleccionadas
df_airbnb <- df_airbnb %>%
select(all_of(variables_seleccionadas))
#Check formato
glimpse(df_airbnb)
df_airbnb <- df_airbnb %>%
mutate(host_response_time = factor(host_response_time,
levels = c("within an hour","within a few hours","within a day","a few days or more","N/A"),
label = c("within an hour","within a few hours","within a day","a few days or more","N/A"),
ordered = T),
host_response_rate = str_remove_all(host_response_rate,"[%N/A]"),
host_response_rate = as.numeric(host_response_rate)/100,
host_acceptance_rate = str_remove_all(host_acceptance_rate,"[%N/A]"),
host_acceptance_rate = as.numeric(host_acceptance_rate)/100)
# separar el tipo y cantidad
df_airbnb <- df_airbnb %>%
mutate(bathrooms_text = str_replace(bathrooms_text, "Shared half-bath", "1 Shared_half-bath")) %>%
mutate(bathrooms_text = str_replace(bathrooms_text, "Private half-bath", "1 Private_half-bath")) %>%
separate(bathrooms_text, into = c("num_baths", "bath_type"), sep = " ", fill = "right", remove = F, convert = T)
# Dicotomización de bath a privado(Private) o no privado (Shared) asumiendo que los que tienen más de un baño "baths" también son privados.
df_airbnb <- df_airbnb %>%
mutate(bath_type = case_when(bath_type %in% c("bath","baths","private","private","Private_half-bath") ~ "Private",
bath_type %in% c("shared","Shared_half-bath") ~ "Shared"))
# Imputación de NA  segun el tipo de habitacion
df_airbnb <- df_airbnb %>%
mutate(bath_type = case_when(is.na(bath_type) & room_type == "Entire home/apt" ~ "Private",
is.na(bath_type) & room_type == "Hotel room" ~ "Private",
is.na(bath_type) & room_type == "Private room" ~ "Shared",
is.na(bath_type) & room_type == "Shared room" ~ "Shared",
TRUE ~ bath_type ))
# Eliminar bathrooms_text
df_airbnb$bathrooms_text<- NULL
# chequeamos cómo quedó la variable
df_airbnb %>%
tabyl(bath_type,room_type) %>%
adorn_percentages("col") %>%
adorn_pct_formatting() %>%
adorn_title("top")
# aramar frecuencia de amenities encontradas
freq_amenities <- df_airbnb %>%
select(amenities) %>%
mutate(amenities = str_replace_all(amenities, "[\\[\\]\"]", "")) %>% # borramos brackets y comillas
unnest_tokens(amenity, amenities, token = "regex", pattern = ",\\s*") %>% # Tokeniza y pone un token por fila
tabyl(amenity) %>%
arrange(desc(n)) %>%
adorn_pct_formatting()
rm(freq_amenities)
df_airbnb <- df_airbnb %>%
mutate(amenities = str_replace_all(amenities, "[\\[\\]\"]", "")) %>% # Eliminar brackets y comillas
mutate(am_tv = ifelse(str_detect(amenities, regex("\\b(TV|HDTV)\\b", ignore_case = TRUE)), 1, 0),
am_streaming_serv_chromecast = ifelse(str_detect(amenities, regex("\\b(netflix|amazon|apple tv|disney+|hbo max|chromecast)\\b", ignore_case = TRUE)), 1, 0),
am_wifi = ifelse(str_detect(amenities, regex("\\bWifi\\b",ignore_case = TRUE)), 1, 0),
am_air_conditioning = ifelse(str_detect(amenities, regex("\\bair conditioning|ac |
central air conditioning|
portable air conditioning\\b", ignore_case = T)), 1, 0),
am_heating = ifelse(str_detect(amenities,regex("\\bheating\\b", ignore_case = TRUE)), 1, 0),
am_kitchen_cooking_stuff = ifelse(str_detect(amenities,regex("\\bkitchen|dishes and silverware|cooking basics|refrigerator|microwave|coffee maker|dining table|toaster|freezer|hot water kettle|stove|wine glasses|coffee\\b", ignore_case = TRUE)), 1, 0),
am_washer = ifelse(str_detect(amenities, regex("\\bwasher|dryer\\b",ignore_case = TRUE)), 1, 0),
am_bedroom_stuff = ifelse(str_detect(amenities,regex("\\bextra pillows and blankets|bed linens\\b", ignore_case = TRUE)), 1, 0),
am_essentials = ifelse(str_detect(amenities,regex("\\bessentials|hangers|hair dryer|hot wate|iron\\b",ignore_case = T)), 1, 0),
am_long_term_stays = ifelse(str_detect(amenities,regex("\\blong term stays allowed|cleaning products\\b",ignore_case = TRUE)), 1, 0),
am_patio_balcony = ifelse(str_detect(amenities,regex("\\bprivate patio or balcony|patio or balcony|shared patio or balcony|backyard\\b", ignore_case = TRUE)),1,0),
am_parking = ifelse(str_detect(amenities,"\\bparking\\b"),1,0),
am_elevator = ifelse(str_detect(amenities,regex("\\belevator\\b", ignore_case = T)),1,0),
am_host_attention = ifelse(str_detect(amenities,"\\bHost greets you\\b"),1,0),
am_shampoo_bath_stuff = ifelse(str_detect(amenities,regex("\\bshampoo|conditioner|bathroom essentials",ignore_case = TRUE)),1,0),
am_bathtub = ifelse(str_detect(amenities,regex("\\bbathtub\\b", ignore_case = TRUE)),1,0),
am_smoking_allowed = ifelse(str_detect(amenities,regex("\\bsmoking allowed\\b",ignore_case= TRUE)),1,0),
am_pet_friendly = ifelse(str_detect(amenities,regex("\\bpets allowed\\b",ignore_case = TRUE)),1,0),
am_fire_security = ifelse(str_detect(amenities,regex("\\bfire extinguisher|smoke alarm|carbon monoxide alarm",ignore_case = TRUE)),1,0))
df_airbnb %>%
select(starts_with("am_")) %>%
questionr::multi.table(true.codes = 1)
df_airbnb %>%
select(starts_with("am_")) %>%
questionr::multi.table(true.codes = 1) %>%
arrange(desc(n))
df_airbnb %>%
select(starts_with("am_")) %>%
questionr::multi.table(true.codes = 1) %>%
tibble::rownames_to_column("am_") %>%
arrange(desc(n)) %>%
mutate(items_area_principal_ = gsub("items_area_principal_","",items_area_principal_)) %>%
rename(estilo = items_area_principal_) %>%
adorn_totals()
df_airbnb %>%
select(starts_with("am_")) %>%
questionr::multi.table(true.codes = 1) %>%
tibble::rownames_to_column("am_") %>%
arrange(desc(n)) %>%
mutate(am_ = gsub("am_","",am_)) %>%
rename(amenties = am_) %>%
adorn_totals()
df_airbnb %>%
select(starts_with("am_")) %>%
questionr::multi.table(true.codes = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("am_") %>%
arrange(desc(n)) %>%
mutate(am_ = gsub("am_","",am_)) %>%
rename(amenties = am_) %>%
adorn_totals()
df_airbnb %>%
select(starts_with("am_")) %>%
questionr::multi.table(true.codes = 1, freq = T) %>%
as.data.frame() %>%
tibble::rownames_to_column("am_") %>%
arrange(desc(n)) %>%
mutate(am_ = gsub("am_","",am_)) %>%
rename(amenties = am_) %>%
adorn_totals()
View(dicc_var)
View(dicc_var)
df_airbnb <- read.csv("input/listings.csv")
head(df_airbnb$last_scraped)
str(df_airbnb$last_scraped)
df_airbnb %>%
tabyl(last_scraped)
df_airbnb %>%
tabyl(number_of_reviews_ltm)
df_airbnb %>%
filter(number_of_reviews_ltm < 0) %>%
tabyl(number_of_reviews_ltm)
df_airbnb %>%
filter(number_of_reviews_ltm < 1) %>%
tabyl(number_of_reviews_ltm)
df_airbnb %>%
filter(number_of_reviews_ltm < 1) %>%
nrow()
# vector con las variables seleccionadas
variables_seleccionadas <- c("id","name","number_of_reviews","number_of_reviews_ltm","number_of_reviews_l30d","host_id","host_response_time","host_response_rate","host_acceptance_rate","host_is_superhost","host_has_profile_pic","host_identity_verified","neighbourhood_cleansed","latitude","longitude","room_type","accommodates","bathrooms_text","bedrooms","beds","amenities","price","review_scores_rating","review_scores_accuracy","review_scores_cleanliness","review_scores_checkin","review_scores_communication","review_scores_location","review_scores_value","instant_bookable","reviews_per_month")
# vector con otras variables que serían interesantes en un ulterior analisis con NLP (usarlas para hacer nubes de palabrtas una vez que están ya hechos los clusters, se une todo por el ID de la publicación o del host segun coorresponda a la tabla)
variables_nlp <- c("description","neighborhood_overview")
# Filtrar columnas seleccionadas
df_airbnb <- df_airbnb %>%
select(all_of(variables_seleccionadas))
#Check formato
glimpse(df_airbnb)
df_airbnb <- read.csv("input/listings.csv")
